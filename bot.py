import os, requests, datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
WEATHER_KEY = os.getenv("WEATHER_TOKEN")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å.")

# –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–≥–æ–¥–∞
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    url  = "https://api.openweathermap.org/data/2.5/forecast"
    params = {
        "q": city,
        "appid": WEATHER_KEY,
        "units": "metric",
        "cnt": 8        # 3-—á–∞—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ ‚âà24 —á
    }
    r = requests.get(url, params=params, timeout=10)
    if r.status_code != 200:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üòû")
        return

    data = r.json()
    today = datetime.date.today().strftime("%d.%m.%Y")
    lines = [f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {data['city']['name']} –Ω–∞ {today}:\n"]

    for item in data["list"]:
        t = datetime.datetime.fromtimestamp(item["dt"]).strftime("%H:%M")
        lines.append(f"{t}  {item['main']['temp']:.0f}¬∞C, {item['weather'][0]['description']}")
    await update.message.reply_text("\n".join(lines))

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, weather))
    app.run_polling()      # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
